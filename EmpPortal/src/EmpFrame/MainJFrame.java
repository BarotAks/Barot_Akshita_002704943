/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package EmpFrame;

import java.io.File;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Pattern;
import java.awt.Component;
import java.awt.Image;
import java.awt.event.KeyEvent;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.RowFilter;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumn;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author akshitabarot
 */
public class MainJFrame extends javax.swing.JFrame {

    /**
     * Creates new forms MainJFrames
     */
    public MainJFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        hdngPortal = new javax.swing.JPanel();
        hdngLabel = new javax.swing.JLabel();
        fldPanel = new javax.swing.JPanel();
        empID = new javax.swing.JLabel();
        empName = new javax.swing.JLabel();
        empAge = new javax.swing.JLabel();
        empLevel = new javax.swing.JLabel();
        empGender = new javax.swing.JLabel();
        empDate = new javax.swing.JLabel();
        empInfo = new javax.swing.JLabel();
        empPTitle = new javax.swing.JLabel();
        empEmail = new javax.swing.JLabel();
        tfEmpID = new javax.swing.JTextField();
        tfEmpInfo = new javax.swing.JTextField();
        tfEmpCell = new javax.swing.JTextField();
        tfEmpName = new javax.swing.JTextField();
        tfEmpAge = new javax.swing.JTextField();
        cbEmpLevel = new javax.swing.JComboBox<>();
        cbEmpGender = new javax.swing.JComboBox<>();
        tfEmpPTitle = new javax.swing.JTextField();
        EmpCell = new javax.swing.JLabel();
        tfEmpEmail = new javax.swing.JTextField();
        btnImg = new javax.swing.JButton();
        tfImage = new javax.swing.JTextField();
        btnUpdate = new javax.swing.JButton();
        btnCreate = new javax.swing.JButton();
        ffEmpDate = new com.toedter.calendar.JDateChooser();
        dispPanel = new javax.swing.JPanel();
        btnDelete = new javax.swing.JButton();
        empSearch = new javax.swing.JLabel();
        tfEmpSearch = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        EmpTable = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        hdngPortal.setBackground(new java.awt.Color(204, 255, 255));
        hdngPortal.setPreferredSize(new java.awt.Dimension(1000, 1000));

        hdngLabel.setFont(new java.awt.Font("Charter", 3, 18)); // NOI18N
        hdngLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        hdngLabel.setText("Employee Portal ");
        hdngLabel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        fldPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Employee Profile", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Charter", 3, 14))); // NOI18N
        fldPanel.setOpaque(false);

        empID.setFont(new java.awt.Font("Charter", 3, 12)); // NOI18N
        empID.setText("Employee ID");

        empName.setFont(new java.awt.Font("Charter", 3, 12)); // NOI18N
        empName.setText("Name");

        empAge.setFont(new java.awt.Font("Charter", 3, 12)); // NOI18N
        empAge.setText("Age");

        empLevel.setFont(new java.awt.Font("Charter", 3, 12)); // NOI18N
        empLevel.setText("Level");

        empGender.setFont(new java.awt.Font("Charter", 3, 12)); // NOI18N
        empGender.setText("Gender");

        empDate.setFont(new java.awt.Font("Charter", 3, 12)); // NOI18N
        empDate.setText("Start Date");

        empInfo.setFont(new java.awt.Font("Charter", 3, 12)); // NOI18N
        empInfo.setText("Team Info");

        empPTitle.setFont(new java.awt.Font("Charter", 3, 12)); // NOI18N
        empPTitle.setText("Position Title");

        empEmail.setFont(new java.awt.Font("Charter", 3, 12)); // NOI18N
        empEmail.setText("Email Address");

        tfEmpAge.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfEmpAgeActionPerformed(evt);
            }
        });

        cbEmpLevel.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4", "5", "6", "7" }));
        cbEmpLevel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbEmpLevelActionPerformed(evt);
            }
        });

        cbEmpGender.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Male", "Female", "Others", "Prefer Not to Say" }));
        cbEmpGender.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbEmpGenderActionPerformed(evt);
            }
        });

        EmpCell.setFont(new java.awt.Font("Charter", 3, 12)); // NOI18N
        EmpCell.setText("Cell Phone No");

        btnImg.setText("Browse for Images");
        btnImg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnImgActionPerformed(evt);
            }
        });

        tfImage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfImageActionPerformed(evt);
            }
        });

        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnCreate.setText("Create");
        btnCreate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateActionPerformed(evt);
            }
        });

        ffEmpDate.setDateFormatString("MM-dd-yyyy");
        ffEmpDate.setFocusable(false);

        javax.swing.GroupLayout fldPanelLayout = new javax.swing.GroupLayout(fldPanel);
        fldPanel.setLayout(fldPanelLayout);
        fldPanelLayout.setHorizontalGroup(
            fldPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(empDate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(empName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(tfEmpID)
            .addComponent(empID, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(tfEmpName)
            .addComponent(empAge, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(empGender, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(tfEmpCell)
            .addComponent(cbEmpLevel, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(empLevel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(cbEmpGender, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(empInfo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(tfEmpInfo)
            .addComponent(empPTitle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(tfEmpPTitle)
            .addComponent(empEmail, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(EmpCell, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(tfEmpEmail)
            .addComponent(btnImg, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(tfImage)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, fldPanelLayout.createSequentialGroup()
                .addComponent(btnCreate, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addComponent(tfEmpAge)
            .addComponent(ffEmpDate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        fldPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnCreate, btnUpdate});

        fldPanelLayout.setVerticalGroup(
            fldPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(fldPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(empName, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tfEmpName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(empID, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tfEmpID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(empAge, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tfEmpAge, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(empGender, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbEmpGender, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(empDate, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ffEmpDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(empLevel, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbEmpLevel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(empInfo, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tfEmpInfo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(empPTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tfEmpPTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(EmpCell, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tfEmpCell, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(empEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tfEmpEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnImg)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tfImage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(fldPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCreate, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(83, Short.MAX_VALUE))
        );

        fldPanelLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {btnCreate, btnUpdate});

        dispPanel.setOpaque(false);

        btnDelete.setBackground(new java.awt.Color(255, 102, 102));
        btnDelete.setFont(new java.awt.Font("Charter", 1, 14)); // NOI18N
        btnDelete.setText("DELETE");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        empSearch.setFont(new java.awt.Font("Charter", 3, 12)); // NOI18N
        empSearch.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        empSearch.setText("Search");
        empSearch.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));

        tfEmpSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfEmpSearchActionPerformed(evt);
            }
        });

        EmpTable.setFont(new java.awt.Font("Charter", 1, 13)); // NOI18N
        EmpTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Name", "EmpID", "Age", "Gender", "StartDate", "Level", "Team Info", "Position Info", "Cell no", "Email ID", "Photo"
            }
        ));
        jScrollPane1.setViewportView(EmpTable);

        javax.swing.GroupLayout dispPanelLayout = new javax.swing.GroupLayout(dispPanel);
        dispPanel.setLayout(dispPanelLayout);
        dispPanelLayout.setHorizontalGroup(
            dispPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, dispPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnDelete)
                .addGap(255, 255, 255))
            .addGroup(dispPanelLayout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(dispPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(dispPanelLayout.createSequentialGroup()
                        .addComponent(empSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(tfEmpSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 536, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 29, Short.MAX_VALUE))))
        );
        dispPanelLayout.setVerticalGroup(
            dispPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dispPanelLayout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(dispPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(empSearch, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(tfEmpSearch))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 433, Short.MAX_VALUE)
                .addGap(48, 48, 48)
                .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout hdngPortalLayout = new javax.swing.GroupLayout(hdngPortal);
        hdngPortal.setLayout(hdngPortalLayout);
        hdngPortalLayout.setHorizontalGroup(
            hdngPortalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(hdngPortalLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(hdngPortalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(hdngLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(hdngPortalLayout.createSequentialGroup()
                        .addComponent(fldPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(dispPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        hdngPortalLayout.setVerticalGroup(
            hdngPortalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(hdngPortalLayout.createSequentialGroup()
                .addComponent(hdngLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(hdngPortalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(hdngPortalLayout.createSequentialGroup()
                        .addComponent(dispPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(fldPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(hdngPortal, javax.swing.GroupLayout.DEFAULT_SIZE, 1021, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(hdngPortal, javax.swing.GroupLayout.PREFERRED_SIZE, 881, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cbEmpLevelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbEmpLevelActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbEmpLevelActionPerformed

    private void cbEmpGenderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbEmpGenderActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbEmpGenderActionPerformed

    private void tfEmpSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfEmpSearchActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tfEmpSearchActionPerformed

    private void tfEmpAgeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfEmpAgeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tfEmpAgeActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
        int row = EmpTable.getSelectedRow();
        
        if (row <0){
            JOptionPane.showMessageDialog(this,
                    "Row not selected! Please select one row",
                    "Select row",
                    JOptionPane.ERROR_MESSAGE);
            
        } else{
            DefaultTableModel model  = (DefaultTableModel) EmpTable.getModel();
            model.removeRow(row);
            
            }
            tfEmpName.setText("");
            tfEmpID.setText("");
            tfEmpAge.setText("");
            cbEmpGender.setSelectedIndex(0);
            //ffEmpDate.setText("");
            //ffEmpDate.setDateFormatString("");
            cbEmpLevel.setSelectedIndex(0);
            tfEmpInfo.setText("");
            tfEmpPTitle.setText("");
            tfEmpCell.setText("");
            tfEmpEmail.setText("");
            
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnCreateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateActionPerformed
        // TODO add your handling code here:
        String name = tfEmpName.getText();
        String empid = tfEmpID.getText();
        String age = tfEmpAge.getText();
        String gender = cbEmpGender.getSelectedItem().toString();                    
        SimpleDateFormat sdf = new SimpleDateFormat("MM-dd-yyyy");
        String date = sdf.format(ffEmpDate.getDate());
        //String startdate = TFStartDate.getText();
        String level = cbEmpLevel.getSelectedItem().toString();
        String teaminfo = tfEmpInfo.getText();
        String positiontitle = tfEmpPTitle.getText();
        String cellphoneno = tfEmpCell.getText();
        String email = tfEmpEmail.getText();
        String image = tfImage.getText();
        int length = cellphoneno.length();
        
        EmpTable.getColumn("imageicon").setCellRenderer(new myTableCellRenderer());
  
             JLabel ImageLabel = new JLabel();        
             ImageIcon imageicon = new ImageIcon(image);
             //Resize image to fixed dimension 60*60 (width*height)
             Image ImageIC = imageicon.getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH);
             //Storimng image in JLabel
             ImageLabel.setIcon(new ImageIcon(ImageIC));
       
        //Check if fields are empty
        if (name.isEmpty() || empid.isEmpty()|| age.isEmpty() || gender.isEmpty()|| date.isEmpty() 
                || level.isEmpty() || teaminfo.isEmpty() || positiontitle.isEmpty() || 
                cellphoneno.isEmpty() || email.isEmpty() ||image.isEmpty()){
            JOptionPane.showMessageDialog(this,
                    "Please enter data in all fields!",
                    "Try Again",
                    JOptionPane.ERROR_MESSAGE);
        } else if(length<10){
            JOptionPane.showMessageDialog(this,
                    "Invalid Number! Please enter 10 digits Phone Number",
                    "Try Again",
                    JOptionPane.ERROR_MESSAGE);
            
            //check if email if in valid format
        } else if (!(Pattern.matches("^[a-zA-Z0-9]+[@]{1}+[a-zA-Z0-9]+[.]{1}+[a-zA-Z0-9]+$", email))) 
            {
            JOptionPane.showMessageDialog(null,
                    "Invalid Email! Please enter a valid EmailID",
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            }
        
        else {
            DefaultTableModel model = (DefaultTableModel) EmpTable.getModel();
            model.addRow( new Object[] {name, empid, age, gender, date, level, teaminfo, 
                positiontitle, cellphoneno, email, ImageLabel});
            
            tfEmpName.setText("");
            tfEmpID.setText("");
            tfEmpAge.setText("");
            cbEmpGender.setSelectedIndex(0); 
            //ffEmpDate.setCalendar(null);
            cbEmpLevel.setSelectedIndex(0);
            tfEmpInfo.setText("");
            tfEmpPTitle.setText("");
            tfEmpCell.setText("");
            tfEmpEmail.setText("");
            tfImage.setText("");
          
             } 
    }//GEN-LAST:event_btnCreateActionPerformed

    
    
    
    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        // TODO add your handling code here:
        String email = tfEmpEmail.getText();
        String cellphoneno = tfEmpCell.getText();
        // check if number is 10 digit or not
        int length = cellphoneno.length();
        if(length<10){
            JOptionPane.showMessageDialog(this,
                    "Invalid Number! Please enter 10 digits Phone Number",
                    "Try Again",
                    JOptionPane.ERROR_MESSAGE);
          //check for valid email id format  
            } 
        else if (!(Pattern.matches("^[a-zA-Z0-9]+[@]{1}+[a-zA-Z0-9]+[.]{1}+[a-zA-Z0-9]+$", email))) 
            {
            JOptionPane.showMessageDialog(null,
                    "Invalid Email! Please enter a valid EmailID",
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            
            }
        
        
        //Getter for Table model
        DefaultTableModel model = (DefaultTableModel) EmpTable.getModel();
        if (EmpTable.getSelectedRowCount()==1)  //if only one row is selected then update
        {
            
                String name = tfEmpName.getText();
                String empid = tfEmpID.getText();
                String age = tfEmpAge.getText();
                String gender = cbEmpGender.getSelectedItem().toString();
                Date date = ffEmpDate.getDate();
                String level = cbEmpLevel.getSelectedItem().toString();
                String teaminfo = tfEmpInfo.getText();
                String positiontitle = tfEmpPTitle.getText();
                cellphoneno = tfEmpCell.getText();
                email = tfEmpEmail.getText();
                //String image = tfImage.getText();
                //int length = cellphoneno.length();
        
                //Set the updated values in the table
                model.setValueAt(name, EmpTable.getSelectedRow(),0);
                model.setValueAt(empid, EmpTable.getSelectedRow(),1);
                model.setValueAt(age, EmpTable.getSelectedRow(),2);
                model.setValueAt(gender, EmpTable.getSelectedRow(),3);
                //model.setValueAt(startdate, EmpTable.getSelectedRow(),4);
                model.setValueAt(date, EmpTable.getSelectedRow(),4);
                //int index = EmpTable.getSelectedRow();
                //date = new SimpleDateFormat("yyyy-MM-dd").parse((String)model.getValueAt(index,4));
                //model.setValueAt(date, EmpTable.getSelectedRow(),4);
                model.setValueAt(level, EmpTable.getSelectedRow(),5);
                model.setValueAt(teaminfo, EmpTable.getSelectedRow(),6);
                model.setValueAt(positiontitle, EmpTable.getSelectedRow(),7);
                model.setValueAt(cellphoneno, EmpTable.getSelectedRow(),8);
                model.setValueAt(email, EmpTable.getSelectedRow(),9);
                //model.setValueAt(image, EmpTable.getSelectedRow(),10);
                
                //Display the message for updation
                JOptionPane.showMessageDialog(this, "Details Updated Successfully!");
        }
        
    else if(EmpTable.getRowCount()==0){
                //if table is empty
                JOptionPane.showMessageDialog(this, "Details not available!");
            } else {
                //if multiple row is selected istead of one row
                JOptionPane.showMessageDialog(this, "Please select only one row for updation");
  
                
            }
    
            tfEmpName.setText("");
            tfEmpID.setText("");
            tfEmpAge.setText("");
            cbEmpGender.setSelectedIndex(0); 
            ffEmpDate.setCalendar(null);
            cbEmpLevel.setSelectedIndex(0);
            tfEmpInfo.setText("");
            tfEmpPTitle.setText("");
            tfEmpCell.setText("");
            tfEmpEmail.setText("");
            //tfImage.setText(""); // check this
   

        
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void tfImageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfImageActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tfImageActionPerformed

    private void btnImgActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnImgActionPerformed
        // TODO add your handling code here:
        JFileChooser browseImageFile = new JFileChooser();
        //Filter the image extensions
        FileNameExtensionFilter Fnef = new FileNameExtensionFilter("Image",  "jpg", "jpeg", "png");
        browseImageFile.addChoosableFileFilter(Fnef);
        int showOpenDialogue = browseImageFile.showOpenDialog(null);
        if (showOpenDialogue == JFileChooser.APPROVE_OPTION){
            File selectedImageFile = browseImageFile.getSelectedFile();
            String selectedImagePath = selectedImageFile.getAbsolutePath();
            //image_txt.setText(selectedImagePath);
            JOptionPane.showMessageDialog(null, selectedImagePath);

        }
    }//GEN-LAST:event_btnImgActionPerformed

    //Emp name is pressed
    private void tfEmpNameClick(java.awt.event.KeyEvent evt) {                                  
        // TODO add your handling code here:
        char c = evt.getKeyChar();
        
        if(Character.isLetter(c) || Character.isWhitespace(c )|| Character.isISOControl(c)){
            tfEmpName.setEditable(true);
        } else {
            tfEmpName.setEditable(false);
        }
    }
    //Emp age is pressed
    private void tfEmpAgeClick(java.awt.event.KeyEvent evt) {                                 
        // TODO add your handling code here:
        String CellNo = tfEmpAge.getText();
        int length = CellNo.length();
        char c = evt.getKeyChar();
        
        //check for number 0 to 1
        if(evt.getKeyChar()>='0' && evt.getKeyChar()<='9'){
            ///checks if length not more than 2 digit
            if(length<2){
                tfEmpAge.setEditable(true);
                
            } else{
                tfEmpAge.setEditable(false);
            }
        }else{
            if (evt.getExtendedKeyCode()==KeyEvent.VK_BACK_SPACE || evt.getExtendedKeyCode()==KeyEvent.VK_DELETE){
                tfEmpAge.setEditable(true);
            } else{
                tfEmpAge.setEditable(false);
            }
        }
    }
    
    
    
     private void tfEmpCellClick(java.awt.event.KeyEvent evt) {                                         
        // TODO add your handling code here:
        
      //  try{
        String CellNo = tfEmpCell.getText();
        int length = CellNo.length();
        char c = evt.getKeyChar();
        
        //checks for number 0 to 1
        if(evt.getKeyChar()>='0' && evt.getKeyChar()<='9'){
            ///checks if length not more than 10 digit
            if(length<10){
                tfEmpCell.setEditable(true);
                
            } else{
                tfEmpCell.setEditable(false);
            }
        }else{
            if (evt.getExtendedKeyCode()==KeyEvent.VK_BACK_SPACE || evt.getExtendedKeyCode()==KeyEvent.VK_DELETE){
                tfEmpCell.setEditable(true);
            } else{
                tfEmpCell.setEditable(false);
            }
        }
     //  }
      /*  catch(Exception e){
            JOptionPane.showMessageDialog(null,e);
        } */
        
    }  
    
         private void EmpTableClick(java.awt.event.MouseEvent evt) {                                      
        // set data to textfield
        
        DefaultTableModel model  = (DefaultTableModel) EmpTable.getModel();
        
        //set data to text field when row is selected
        String tableName = model.getValueAt(EmpTable.getSelectedRow(), 0).toString();
        String tableEmpID = model.getValueAt(EmpTable.getSelectedRow(), 1).toString();
        String tableAge = model.getValueAt(EmpTable.getSelectedRow(), 2).toString();
        String tableGender = model.getValueAt(EmpTable.getSelectedRow(), 3).toString();
        String tableStartDate = model.getValueAt(EmpTable.getSelectedRow(), 4).toString();
        String tableLevel = model.getValueAt(EmpTable.getSelectedRow(), 5).toString();
        String tableTeamInfo = model.getValueAt(EmpTable.getSelectedRow(), 6).toString();
        String tablePositionTitle = model.getValueAt(EmpTable.getSelectedRow(), 7).toString();
        String tableCellNo = model.getValueAt(EmpTable.getSelectedRow(), 8).toString();
        String tableEmail = model.getValueAt(EmpTable.getSelectedRow(), 9).toString();
        String tableImage = model.getValueAt(EmpTable.getSelectedRow(), 10).toString();
        //set to textField
        
        tfEmpName.setText(tableName);
        tfEmpID.setText(tableEmpID);
        tfEmpAge.setText(tableAge);
        cbEmpGender.setSelectedItem(tableGender);
        //ffEmpDate.setText(tableStartDate);
        cbEmpLevel.setSelectedItem(tableLevel);
        tfEmpInfo.setText(tableTeamInfo);
        tfEmpPTitle.setText(tablePositionTitle);
        tfEmpCell.setText(tableCellNo);
        tfEmpEmail.setText(tableEmail);
        //tfImage.setText(tableImage);
        
        
        
    }                                     

    public void search(String str){
        DefaultTableModel model = (DefaultTableModel)EmpTable.getModel();
         TableRowSorter<DefaultTableModel> trs = new TableRowSorter<DefaultTableModel>(model);
         EmpTable.setRowSorter(trs);
         trs.setRowFilter(RowFilter.regexFilter(str));
    }
    
    private void tfEmpSearchKeyReleased(java.awt.event.KeyEvent evt) {                                     
         // TODO add your handling code here:
         String search = tfEmpSearch.getText();
         search(search);
         
    } 
    
    //for table
     class myTableCellRenderer implements TableCellRenderer{
        
        public Component getTableCellRendererComponent (JTable table, Object value, boolean isSelected, 
                boolean hasFocus, int row, int column){
            
            //Change Image column minimum width and maximum width
            TableColumn tb = EmpTable.getColumn("imageicon");
            tb.setMaxWidth(60);
            
            EmpTable.setRowHeight(60);
            return (Component) value;
        }
    } 
     
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainJFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel EmpCell;
    private javax.swing.JTable EmpTable;
    private javax.swing.JButton btnCreate;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnImg;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JComboBox<String> cbEmpGender;
    private javax.swing.JComboBox<String> cbEmpLevel;
    private javax.swing.JPanel dispPanel;
    private javax.swing.JLabel empAge;
    private javax.swing.JLabel empDate;
    private javax.swing.JLabel empEmail;
    private javax.swing.JLabel empGender;
    private javax.swing.JLabel empID;
    private javax.swing.JLabel empInfo;
    private javax.swing.JLabel empLevel;
    private javax.swing.JLabel empName;
    private javax.swing.JLabel empPTitle;
    private javax.swing.JLabel empSearch;
    private com.toedter.calendar.JDateChooser ffEmpDate;
    private javax.swing.JPanel fldPanel;
    private javax.swing.JLabel hdngLabel;
    private javax.swing.JPanel hdngPortal;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField tfEmpAge;
    private javax.swing.JTextField tfEmpCell;
    private javax.swing.JTextField tfEmpEmail;
    private javax.swing.JTextField tfEmpID;
    private javax.swing.JTextField tfEmpInfo;
    private javax.swing.JTextField tfEmpName;
    private javax.swing.JTextField tfEmpPTitle;
    private javax.swing.JTextField tfEmpSearch;
    private javax.swing.JTextField tfImage;
    // End of variables declaration//GEN-END:variables
}
